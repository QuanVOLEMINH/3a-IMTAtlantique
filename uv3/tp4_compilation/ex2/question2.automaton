State 0:
expression' -> . expression [ # ]
-- On IDENT shift to state 1
-- On expression shift to state 2
-- On e shift to state 3

State 1:
e -> IDENT . [ TIMES PLUS EOF ]
-- On TIMES reduce production e -> IDENT 
-- On PLUS reduce production e -> IDENT 
-- On EOF reduce production e -> IDENT 

State 2:
expression' -> expression . [ # ]
-- On # accept expression

State 3:
e -> e . PLUS e [ TIMES PLUS EOF ]
e -> e . TIMES e [ TIMES PLUS EOF ]
expression -> e . EOF [ # ]
-- On TIMES shift to state 4
-- On PLUS shift to state 6
-- On EOF shift to state 8

State 4:
e -> e TIMES . e [ TIMES PLUS EOF ]
-- On IDENT shift to state 1
-- On e shift to state 5

State 5:
e -> e . PLUS e [ TIMES PLUS EOF ]
e -> e . TIMES e [ TIMES PLUS EOF ]
e -> e TIMES e . [ TIMES PLUS EOF ]
-- On TIMES shift to state 4
-- On PLUS shift to state 6
-- On TIMES reduce production e -> e TIMES e 
-- On PLUS reduce production e -> e TIMES e 
-- On EOF reduce production e -> e TIMES e 
** Conflict on TIMES PLUS

State 6:
e -> e PLUS . e [ TIMES PLUS EOF ]
-- On IDENT shift to state 1
-- On e shift to state 7

State 7:
e -> e . PLUS e [ TIMES PLUS EOF ]
e -> e PLUS e . [ TIMES PLUS EOF ]
e -> e . TIMES e [ TIMES PLUS EOF ]
-- On TIMES shift to state 4
-- On PLUS shift to state 6
-- On TIMES reduce production e -> e PLUS e 
-- On PLUS reduce production e -> e PLUS e 
-- On EOF reduce production e -> e PLUS e 
** Conflict on TIMES PLUS

State 8:
expression -> e EOF . [ # ]
-- On # reduce production expression -> e EOF 

